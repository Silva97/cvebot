import * as fs from 'fs';
import * as readline from 'readline';
import fetch from 'node-fetch';
import { NvdApi, NvdCve } from './nvd-api.js';

export class CveFeed {
  private debugMode: boolean;
  private feedPageUrl: string;
  private cveListFile: string;
  private cveList: Set<string> = new Set();
  private publishedCveList: Set<string> = new Set();

  constructor(config: CveFeedConfig) {
    this.feedPageUrl = config.feedPageUrl;
    this.cveListFile = config.cveListFile;
    this.debugMode = config.debugMode || false;

    this.parsePublishedCveListFromFile();
  }

  public async fetchList(): Promise<FetchResponse> {
    const pageResponse = await fetch(this.feedPageUrl);
    const pageContent = await pageResponse.text();

    if (pageResponse.status != 200) {
      this.debugMessage('Failed on try to get CVE list.');

      return {
        successful: false,
        failed: true,
        message: 'Failed on try to get CVE list.',
        status: pageResponse.status,
        response: pageContent,
      };
    }

    const cveList = this.parseCveListFromPageContent(pageContent);
    this.addToCveList(cveList);

    this.debugMessage(
      `Fetched CVE list with ${this.publishedCveList.size}/${this.cveList.size} published.`,
    );

    return {
      successful: true,
      failed: false,
      message: 'CVE list has been successful read.',
      status: pageResponse.status,
      response: pageContent,
    };
  }

  public async fetchNextCve(): Promise<NvdCve | null> {
    const nvd = new NvdApi();

    for (const cveId of this.cveList.values()) {
      if (!this.publishedCveList.has(cveId)) {
        const cveContent = await nvd.getCveDetails(cveId);

        this.addAsPublished(cveId);
        return cveContent;
      }
    }

    return null;
  }

  private addAsPublished(cveId: string) {
    this.publishedCveList.add(cveId);
    this.debugMessage(`Added ${cveId} to published list.`);

    fs.appendFile(this.cveListFile, cveId + '\n', (error) => {
      if (error) {
        console.warn(
          `[WARN] Could not save ${cveId} to published file list: ${this.cveListFile}`,
        );
      }
    });
  }

  private async parsePublishedCveListFromFile(): Promise<void> {
    if (!fs.existsSync(this.cveListFile)) {
      return;
    }

    const input = fs.createReadStream(this.cveListFile);
    const rl = readline.createInterface({
      input: fs.createReadStream(this.cveListFile),
      crlfDelay: Infinity,
    });

    rl.on('line', (line) => {
      this.publishedCveList.add(line);
      this.debugMessage(`Added ${line} to published list.`);
    });

    input.close();
  }

  private parseCveListFromPageContent(content: string): Array<string> {
    const newEntries = content.substring(0, content.indexOf('Graduations'));

    const cveList = newEntries.match(/(?<=\>)[0-9]+\-[0-9]+/g);
    return cveList || [];
  }

  private addToCveList(list: Array<string>): void {
    for (const cve of list) {
      this.cveList.add('CVE-' + cve);
    }
  }

  private debugMessage(message: string) {
    if (!this.debugMode) {
      return;
    }

    console.log('[DEBUG] ' + message);
  }
}

export interface CveFeedConfig {
  feedPageUrl: string;
  cveListFile: string;
  debugMode?: boolean;
}

export interface FetchResponse {
  successful: boolean;
  failed: boolean;
  message: string;
  status: number;
  response: string;
}
